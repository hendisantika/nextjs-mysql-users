# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  #  ENV_GITHUB: ${{ vars.ENV_GITHUB }}
  IMAGE_TAG: ${{ github.run_number }}
  CONTAINER_NAME: user-management
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.actor }}/user-management

jobs:
  project-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x, 20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run Production
        run: |
          cp .env.example .env
          pnpm run build

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: project-build
    env:
      IMAGE_TAG: ${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - run: docker build --tag user-management:$IMAGE_TAG .

      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
          IMAGE_TAG: ${{ github.run_number }}
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ secrets.AWS_REGION }}
          image: user-management:$IMAGE_TAG

  docker-build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - project-build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log into the Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Scrape build info
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: hendisantika/user-management:${{ github.run_number }}
          build-args: |
            GIT_VERSION_TAG=${{ env.RELEASE_VERSION }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            GIT_VERSION_HASH=${{ github.sha }}

  deploy:
    needs: docker-build
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      #      - name: install ssh keys
      #        run: |
      #          install -m 600 -D /dev/null ~/.ssh/id_rsa
      #          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
      #          ssh-keyscan -H ${{ secrets.HOST }} > ~/.ssh/known_hosts
      - name: Add Server key
        run: |
          touch key.txt && echo "${{ secrets.SSH_KEY }}" > key.txt
          chmod 600 key.txt

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      #      - name: connect and pull
      #        env:
      #          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
      #          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
      #          IMAGE_TAG: ${{ github.run_number }}
      #        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "cd /var/www/DALIM && export ECR_PW=`aws ecr get-login-password --region ap-southeast1 --output text | docker login --username AWS --password-stdin` && docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest && docker compose pull && docker compose up -d && exit"

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
          sudo chmod 600 ~/.ssh/private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          sudo chmod 600 ~/.ssh/known_hosts
        shell: bash
        env:
          SERVER_USERNAME: ${{ secrets.SSH_USERNAME }}
          SERVER_PORT: ${{ secrets.SSH_PORT }}
          SERVER_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{secrets.SSH_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_HOST}}

      - name: Set all environment variables
        env:
          SERVER_HOST: ${{ secrets.SSH_HOST }}
          SERVER_PORT: ${{ secrets.SSH_PORT }}
          SERVER_USERNAME: ${{ secrets.SSH_USERNAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: user-management
          IMAGE_TAG: ${{ github.run_number }}
          CONTAINER_NAME: user-management
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

        run: |
          echo AWS_REGION=$AWS_REGION >> .env
          echo AWS_ECR_REGISTRY=$AWS_ECR_REGISTRY >> .env
          echo CONTAINER_NAME=$CONTAINER_NAME >> .env
          echo ECR_REPOSITORY=$ECR_REPOSITORY >> .env
          echo IMAGE_TAG=$IMAGE_TAG >> .env

      - name: Copy all environment variables
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./.env"  # Path to the file on your runner
          target: "~/user-management"  # Target directory on the server

      - name: Run the application
        env:
          SERVER_HOST: ${{ secrets.SSH_HOST }}
          SERVER_PORT: ${{ secrets.SSH_PORT }}
          SERVER_USERNAME: ${{ secrets.SSH_USERNAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mhdc-main
          IMAGE_TAG: ${{ github.run_number }}
          CONTAINER_NAME: mhdc-main
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

        run: |
          set -e
          ./deploy.sh

      - name: Docker pull & run from github
        uses: appleboy/ssh-action@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG: ${{ github.run_number }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: ECR_REGISTRY, CONTAINER_NAME, IMAGE_TAG
          allenvs: true
          script: |
            docker pull $ECR_REGISTRY/$CONTAINER_NAME:$IMAGE_TAG
            docker system prune -af
            docker stop user-management
            docker rm user-management
            docker run -d --rm --name user-management -p 3000:3000 $ECR_REGISTRY/$CONTAINER_NAME:$IMAGE_TAG
